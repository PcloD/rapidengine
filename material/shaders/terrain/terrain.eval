#version 410

layout(triangles, fractional_odd_spacing, ccw) in;

in vec3 WorldPos_ES_in[];
in vec3 TexCoord_ES_in[];
in vec3 MatCoord_ES_in[];
in vec3 Normal_ES_in[];

out vec3 WorldPos_FS_in;
out vec3 TexCoord_FS_in;
out vec3 MatCoord_FS_in;
out float Visibility_FS_in;

uniform mat4 modelMtx;
uniform mat4 viewMtx;
uniform mat4 projectionMtx;

uniform sampler2D terrainHeightMap;
uniform sampler2D terrainNormalMap;
uniform float terrainDisplacement;

// Material
uniform sampler2D heightMap;
uniform float displacement;

const float fogDensity = 0.007;
const float fogGradient = 1.5;

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) {
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float getTerrainDisplacement(vec3 texCoords) {
    return texture(terrainHeightMap, texCoords.xy).x * terrainDisplacement;
}

float getMaterialDisplacement(vec3 texCoords) {
    return texture(heightMap, texCoords.xy).x * displacement;
}

float getFogVisibility(vec4 mPos) {
    vec4 positionRelativeCamera = viewMtx * mPos;
    float dist = length(positionRelativeCamera.xyz);
    return clamp(exp(-pow((dist * fogDensity), fogGradient)), 0.0, 1.0);
}

vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float simplex(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

void main() {
    vec3 texCoords = interpolate3D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);
    TexCoord_FS_in = texCoords;

    MatCoord_FS_in = interpolate3D(MatCoord_ES_in[0], MatCoord_ES_in[1], MatCoord_ES_in[2]);

    vec3 worldPos = interpolate3D(WorldPos_ES_in[0], WorldPos_ES_in[1], WorldPos_ES_in[2]);

    vec3 terrainNormal = interpolate3D(Normal_ES_in[0], Normal_ES_in[1], Normal_ES_in[2]);
    worldPos += normalize(terrainNormal) * getTerrainDisplacement(texCoords); //simplex(worldPos.xz / 5000.0) * 1000; 
    worldPos += normalize(terrainNormal) * getMaterialDisplacement(MatCoord_FS_in);

    Visibility_FS_in = getFogVisibility(modelMtx * vec4(worldPos, 1.0));

    WorldPos_FS_in = worldPos;
    gl_Position = projectionMtx * viewMtx * modelMtx * vec4(worldPos, 1.0);
}
